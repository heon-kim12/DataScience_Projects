# -*- coding: utf-8 -*-
"""Data analysis and prediction model for an enhanced Wine Quality Prediction Using XGBoost Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f27fFRTemUQAkEH0cCNtaZq9_B2OWuaZ
"""

!sudo apt-get install -y
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as nd
import matplotlib
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
wine_data = pd.read_csv("/content/wine.csv", encoding="UTF-8")
wine_data.head(10)

wine_data.boxplot(column = "pH", by = "quality")

plt.scatter(x=wine_data['fixed acidity'], y=wine_data['density'])

wine_data.corr()

import seaborn as sns
plt.figure(figsize = (10,10))
sns.heatmap(data = wine_data.corr(), annot = True, color ='red')

wine_data = pd.read_csv("/content/wine.csv", encoding="UTF-8")
print(wine_data.columns)

wine_info = wine_data[['fixed acidity','volatile acidity','pH','alcohol']]
wine_info.describe()

pd.plotting.scatter_matrix(wine_info, marker = '+', figsize = (10,10))

wine_data.hist(figsize=(10,10))

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

wine_data = pd.read_csv("/content/wine.csv", encoding="UTF-8")

X = wine_data.drop(['quality'], axis=1)
y = wine_data['quality']  # the target class

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Random Forest Classifier
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_clf.fit(X_train, y_train)

# Predict on the test data
y_pred = rf_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print(classification_report(y_test, y_pred))

"""#### Seems that the support values suggested are imbalanced. Some classes have more values for accurate predictions and others dont. This time, I will use XGBoost."""

!pip install xgboost

import pandas as pd
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from sklearn.preprocessing import LabelEncoder

# Load data
wine_data = pd.read_csv("./wine.csv", encoding="UTF-8")

# Prepare data
X = wine_data.drop('quality', axis=1)
y = wine_data['quality']

# Reindex classes to start from 0
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split data
X_train, X_test, y_train_encoded, y_test_encoded = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Initialize XGBoost Classifier
xgb_clf = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')

# Train the model
xgb_clf.fit(X_train, y_train_encoded)

# Make predictions
y_pred_encoded = xgb_clf.predict(X_test)
y_pred = label_encoder.inverse_transform(y_pred_encoded)

# Evaluation
print("Accuracy:", accuracy_score(y_test_encoded, y_pred_encoded))
print(classification_report(y_test_encoded, y_pred_encoded))